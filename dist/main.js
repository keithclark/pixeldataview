/*! @keithclark/pixeldataview v1.0.0 - Keith Clark - MIT license */
const t=(t,e,r,h)=>{Array.isArray(e)&&(e=i(e)),((t,e,i)=>{throw i&&(e=i+". "+e),new t(e)})(t,`Expected ${e}, got ${r}.`,h?`Invalid ${h}`:h)},e=t=>"string"==typeof t?`"${t}"`:t,i=t=>t.length<2?t[0]:`${t.slice(0,-1).join(", ")} or ${t.at(-1)}`,r=(e,i,r,h="Invalid value")=>{(e<i||e>r)&&t(RangeError,`between ${i} and ${r}`,e,h)},h=(e,i,r)=>{i.some(t=>e instanceof t)||t(TypeError,i.map(t=>t.name),typeof e,r)},s=(e,i,r)=>{i.includes(typeof e)||t(TypeError,i,typeof e,r)};class ChunkyPixelDataView{#t;#e;#i;constructor(t,e,i,a=0){r(arguments.length,3,4,"argument count"),"SharedArrayBuffer"in globalThis?h(t,[ArrayBuffer,SharedArrayBuffer]):h(t,[ArrayBuffer]),s(e,["number"],"width"),s(i,["number"],"height"),this.#t=new DataView(t,a,e*i*4),this.#e=e,this.#i=i}getColorAt(t,e){return r(t,0,this.#e,"x"),r(e,0,this.#i,"y"),this.#t.getUint32(e*this.#e+t<<2)}setColor(t,e,i){r(t,0,this.#e,"x"),r(e,0,this.#i,"y"),this.#t.setUint32(e*this.#e+t<<2,i)}}const a="word",o="line",n="contiguous";class PlanarPixelDataView{#t;#e;#i;#r;#h;#s;#a;constructor(i,l,f,w,c=a,d=0){var u,p,g;let y;r(arguments.length,4,6,"argument count"),"SharedArrayBuffer"in globalThis?h(i,[ArrayBuffer,SharedArrayBuffer]):h(i,[ArrayBuffer]),s(l,["number"],"width"),s(f,["number"],"height"),s(w,["number"],"plane count"),g="interleave format",(p=[n,o,a]).includes(u=c)||t(RangeError,p.map(e),e(u),g),c===a?(y=2*Math.ceil(l/16),this.#s=2,this.#h=(t,e)=>e*y*w+2*w*(t>>4)+(t%16<8?0:1)):c===o?(y=Math.ceil(l/8),this.#s=y,this.#h=(t,e)=>e*y*w+(t>>3)):c===n&&(y=Math.ceil(l/8),this.#s=y*f,this.#h=(t,e)=>e*y+(t>>3)),this.#t=new Uint8Array(i,d,y*f*w),this.#e=l,this.#i=f,this.#r=w,this.#a=1<<w}getColor(t,e){r(t,0,this.#e,"x"),r(e,0,this.#i,"y");const i=1<<7-(7&t);let h=this.#h(t,e),s=0;for(let t=0;t<this.#r;t++)s|=this.#t[h]&i?1<<t:0,h+=this.#s;return s}setColor(t,e,i){r(t,0,this.#e,"x"),r(e,0,this.#i,"y"),r(i,0,this.#a-1,"color");const h=1<<7-(7&t);let s=this.#h(t,e);for(let t=0;t<this.#r;t++)1&i?this.#t[s]|=h:this.#t[s]&=~h,s+=this.#s,i>>=1}}export{ChunkyPixelDataView,PlanarPixelDataView};
